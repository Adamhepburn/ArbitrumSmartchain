// BettingContract.ts - Smart contract template for peer-to-peer betting
export const bettingContractAbi = [
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "_title",
        "type": "string"
      },
      {
        "internalType": "string",
        "name": "_description",
        "type": "string"
      },
      {
        "internalType": "string",
        "name": "_category",
        "type": "string"
      },
      {
        "internalType": "string",
        "name": "_outcome1",
        "type": "string"
      },
      {
        "internalType": "string",
        "name": "_outcome2",
        "type": "string"
      },
      {
        "internalType": "uint256",
        "name": "_endDate",
        "type": "uint256"
      },
      {
        "internalType": "address",
        "name": "_resolver",
        "type": "address"
      }
    ],
    "stateMutability": "payable",
    "type": "constructor"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "acceptor",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "BetAccepted",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": false,
        "internalType": "enum BettingContract.Outcome",
        "name": "outcome",
        "type": "uint8"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "winner",
        "type": "address"
      }
    ],
    "name": "BetResolved",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [],
    "name": "BetVoided",
    "type": "event"
  },
  {
    "inputs": [],
    "name": "acceptBet",
    "outputs": [],
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "acceptor",
    "outputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "betAmount",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "category",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "creator",
    "outputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "description",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "endDate",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getBetDetails",
    "outputs": [
      {
        "components": [
          {
            "internalType": "string",
            "name": "title",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "description",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "category",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "outcome1",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "outcome2",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "endDate",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "betAmount",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "creator",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "acceptor",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "resolver",
            "type": "address"
          },
          {
            "internalType": "enum BettingContract.Status",
            "name": "status",
            "type": "uint8"
          },
          {
            "internalType": "enum BettingContract.Outcome",
            "name": "outcome",
            "type": "uint8"
          }
        ],
        "internalType": "struct BettingContract.BetDetails",
        "name": "",
        "type": "tuple"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "outcome",
    "outputs": [
      {
        "internalType": "enum BettingContract.Outcome",
        "name": "",
        "type": "uint8"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "outcome1",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "outcome2",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "enum BettingContract.Outcome",
        "name": "_outcome",
        "type": "uint8"
      }
    ],
    "name": "resolveBet",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "resolver",
    "outputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "status",
    "outputs": [
      {
        "internalType": "enum BettingContract.Status",
        "name": "",
        "type": "uint8"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "title",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "voidBet",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
];

// The bytecode of the compiled contract
export const bettingContractBytecode = "";

// The Solidity source code that generates this contract
// This is here for reference, but we use the pre-compiled ABI and bytecode above
/*
pragma solidity ^0.8.0;

contract BettingContract {
    enum Status { Open, Accepted, Resolved, Voided }
    enum Outcome { NotResolved, Outcome1Wins, Outcome2Wins, Draw }
    
    struct BetDetails {
        string title;
        string description;
        string category;
        string outcome1;
        string outcome2;
        uint256 endDate;
        uint256 betAmount;
        address creator;
        address acceptor;
        address resolver;
        Status status;
        Outcome outcome;
    }
    
    string public title;
    string public description;
    string public category;
    string public outcome1;
    string public outcome2;
    uint256 public endDate;
    uint256 public betAmount;
    
    address public creator;
    address public acceptor;
    address public resolver;
    
    Status public status;
    Outcome public outcome;
    
    event BetAccepted(address indexed acceptor, uint256 amount);
    event BetResolved(Outcome outcome, address indexed winner);
    event BetVoided();
    
    modifier onlyResolver() {
        require(msg.sender == resolver, "Only the resolver can call this function");
        _;
    }
    
    modifier onlyBeforeEndDate() {
        require(block.timestamp < endDate, "Bet period has ended");
        _;
    }
    
    modifier onlyAfterEndDate() {
        require(block.timestamp >= endDate, "Bet period has not ended yet");
        _;
    }
    
    constructor(
        string memory _title,
        string memory _description,
        string memory _category,
        string memory _outcome1,
        string memory _outcome2,
        uint256 _endDate,
        address _resolver
    ) payable {
        require(_endDate > block.timestamp, "End date must be in the future");
        
        title = _title;
        description = _description;
        category = _category;
        outcome1 = _outcome1;
        outcome2 = _outcome2;
        endDate = _endDate;
        betAmount = msg.value;
        
        creator = msg.sender;
        resolver = _resolver;
        status = Status.Open;
        outcome = Outcome.NotResolved;
    }
    
    function acceptBet() external payable returns (uint256) {
        require(status == Status.Open, "Bet is not open for acceptance");
        require(msg.value == betAmount, "Must match the exact bet amount");
        require(msg.sender != creator, "Creator cannot accept their own bet");
        
        acceptor = msg.sender;
        status = Status.Accepted;
        
        emit BetAccepted(acceptor, msg.value);
        
        return betAmount;
    }
    
    function resolveBet(Outcome _outcome) external onlyResolver {
        require(status == Status.Accepted, "Bet must be accepted before resolving");
        require(_outcome != Outcome.NotResolved, "Cannot resolve to NotResolved state");
        require(outcome == Outcome.NotResolved, "Bet already resolved");
        
        outcome = _outcome;
        status = Status.Resolved;
        
        address winner;
        if (_outcome == Outcome.Outcome1Wins) {
            winner = creator;
        } else if (_outcome == Outcome.Outcome2Wins) {
            winner = acceptor;
        } else {
            // In case of a draw, both get their money back
            payable(creator).transfer(betAmount);
            payable(acceptor).transfer(betAmount);
            emit BetResolved(_outcome, address(0));
            return;
        }
        
        // Winner gets both stakes
        payable(winner).transfer(betAmount * 2);
        
        emit BetResolved(_outcome, winner);
    }
    
    function voidBet() external onlyResolver {
        require(status == Status.Open || status == Status.Accepted, "Cannot void resolved or already voided bet");
        
        status = Status.Voided;
        
        // Return funds to participants
        payable(creator).transfer(betAmount);
        if (status == Status.Accepted) {
            payable(acceptor).transfer(betAmount);
        }
        
        emit BetVoided();
    }
    
    function getBetDetails() external view returns (BetDetails memory) {
        return BetDetails({
            title: title,
            description: description,
            category: category,
            outcome1: outcome1,
            outcome2: outcome2,
            endDate: endDate,
            betAmount: betAmount,
            creator: creator,
            acceptor: acceptor,
            resolver: resolver,
            status: status,
            outcome: outcome
        });
    }
}
*/